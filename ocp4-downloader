#!/usr/bin/env bash

# Description: Script to download several products related with OpenShift 4
# Author:      Sergio Garcia (soukron@gmbros.net)

# install dir
INSTALLDIR=${HOME}/.local/ocp4/bin

# download urls
BASE_URL=https://mirror.openshift.com/pub/openshift-v4/clients
OPENSHIFT_URL=${BASE_URL}/ocp

# cleanup on exit
function cleanup_on_exit() {
  [[ ! -v KEEPTMP ]] && rm -fr ${TMPDIR}
  popd &>/dev/null
  kill 0
}
trap cleanup_on_exit EXIT

# usage
function usage() {
  cat <<EOF
Usage: `basename ${0}` [--force] [--version <ver>] [--all|--client|--install|installer]
  --all               downloads all products
  --client|--oc       downloads OpenShift CLI (oc / kubectl)
  --force             deletes any existing file matching the version
  --help|-h           shows this message
  --installdir        sets the installation directory. Default: \$HOME/bin
  --install|installer downloads OpenShift Installer (openshift-install)
  --version <ver>     select the version to download for all components. Default: latest
EOF
  exit 0
}

# download and extract a file
# $1 - prefix
# $2 - version
# $3 - baseurl
# $4 - filename
function download_and_extract() {
  echo "[${1}] Downloading ${4} to disk, please be patient..."
  wget -q ${3}/${2}/${4} -O ${TMPDIR}/${4} || { echo "[${1}] ERROR: error downloading file, can't continue with installation."; return 1; }

  echo "[$1] Extracting..."
  tar xfa ${TMPDIR}/${4} -C ${TMPDIR} || { echo "[${1}] ERROR: error extracting file, can't continue with installation."; return 1; }

  return 0
}

# cleanup if --force is present
# $1 - prefix
# $2 - files to delete
function cleanup_if_force() {
  if [[ ${FORCE} ]]; then
    echo "[${1}] Cleaning up previous existing file..."
    rm -fr ${2}
  fi
}

# check if file exists and returns a code based on the task (set/download)
# $1 - prefix
# $2 - file
# $3 - download
function check_if_exists() {
  if [[ -f ${2} ]]; then
    echo "[${1}] File ${2} is present."
    if [[ ${3} == "YES" ]]; then return 1; else return 0; fi
  fi
  if [[ ${3} == "NO" ]]; then
    echo "[${1}] File ${2} is NOT present. Please download it first."
    return 1
  else
    return 0
  fi
}

# create wrapper for each tool
# $1 - prefix
# $2 - binary name
# $3 - environment variable name
function create_product_wrapper() {
  echo "[${1}] Creating tool wrapper."
  cat <<EOF > ${INSTALLDIR}/${2}
#!/bin/bash

WRAPPER_NAME=${2}
WRAPPER_VERSION_VAR=${3}
WRAPPER_BASEDIR=${INSTALLDIR}

# Don't need to edit anything after this line
WRAPPER_VERSION=\${!WRAPPER_VERSION_VAR:-\${OCP4_VERSION:-"default"}}
WRAPPER_CMD=\`basename \$0\`-\${WRAPPER_VERSION}

# Check for --wrapper-info argument to show help
if [ "\$1" == "--wrapper-info" ]; then
  echo "Wrapper info:
  - WRAPPER_NAME: \${WRAPPER_NAME}
  - WRAPPER_VERSION: \${WRAPPER_VERSION}
  - WRAPPER_BASEDIR: \${WRAPPER_BASEDIR}"
  echo

  echo -e "Available versions (for \\$\${WRAPPER_VERSION_VAR} and/or \\\$OCP4_VERSION):"
  for version in \`ls -1 \${WRAPPER_BASEDIR}/\${WRAPPER_NAME}-* | grep -v wrapper | rev | cut -d - -f 1 | rev\`; do
    echo -n "  - \${version}"
    if [ "\${version}" == "default" ]; then
      echo " (\$(readlink \${WRAPPER_BASEDIR}/\${WRAPPER_NAME}-* | rev | cut -d - -f 1 | rev))"
    fi
    echo
  done

  exit
fi

# Helper to set the default version
if [ "\$1" == "--wrapper-set-default" ]; then
  if [ ! -f \${WRAPPER_BASEDIR}/\${WRAPPER_NAME}-\${2} ]; then
    echo "Error: unable to set as default a non-existant version"
  else
    ln -sf \${WRAPPER_NAME}-\${2} \${WRAPPER_BASEDIR}/\${WRAPPER_NAME}-default
  fi

  exit
fi

# Check if binary exists and exit if not
if [ ! -f \${WRAPPER_BASEDIR}/\${WRAPPER_CMD} ]; then
  echo "Error: file \${WRAPPER_CMD} not found in \${WRAPPER_BASEDIR}. Set variable \\\$\${WRAPPER_VERSION_VAR}, \\\${OCP4_VERSION} or symlink any version as default"
  exit
fi

# Launch the tool
\${WRAPPER_BASEDIR}/\${WRAPPER_CMD} "\$@"
EOF
  chmod +x ${INSTALLDIR}/${2}
}

# generic download function
# $1 - product name / prefix
# $2 - version
# $3 - download
function download_product() {
  # set prefix
  PREFIX=${1}
  VERSION=${2}
  DOWNLOAD=${3}

  # resolve version
  if [[ $(echo ${VERSION} |grep -E "latest|stable|candidate|fast") ]];then
    VERSION=$( curl -s ${OPENSHIFT_URL}/${VERSION}/release.txt | grep "Release Metadata:" -A1 | grep Version | cut -d\: -f 2 | tr -d " " )
    [[ ${VERSION} == "" ]] && echo "[${PREFIX}] Unable to resolve the version. Check the version parameter and retry." && return
    echo "[${PREFIX}] Version resolved to ${VERSION}."
  fi

  # vars to use during rest of the process
  case ${PREFIX} in
    openshift-client)
      FILENAME=openshift-client-linux-${VERSION}
      REMOTE_FILENAME=${FILENAME}.tar.gz
      URL=${OPENSHIFT_URL}
      BINARY=oc
      ;;
    openshift-install)
      FILENAME=openshift-install-linux-${VERSION}
      REMOTE_FILENAME=${FILENAME}.tar.gz
      URL=${OPENSHIFT_URL}
      BINARY=openshift-install
      ;;
  esac

  # pre-installation tasks
  cleanup_if_force ${PREFIX} ${BINARY}-${VERSION}
  check_if_exists ${PREFIX} ${BINARY}-${VERSION} ${DOWNLOAD} || return

  # download and do the installation depending on the product
  case ${PREFIX} in
    openshift-client)
      download_and_extract ${PREFIX} ${VERSION} ${URL} ${REMOTE_FILENAME} || return
      mv ${TMPDIR}/${BINARY} ${BINARY}-${VERSION}
      create_product_wrapper ${PREFIX} ${BINARY} OC_VERSION
      ;;
    openshift-install)
      download_and_extract ${PREFIX} ${VERSION} ${URL} ${REMOTE_FILENAME} || return
      mv ${TMPDIR}/${BINARY} ${BINARY}-${VERSION}
      create_product_wrapper ${PREFIX} ${BINARY} OPENSHIFT_INSTALL_VERSION
      ;;
  esac
  echo "[${PREFIX}] ${FILENAME} successfully installed!!"
}

# parse arguments from commandline
POSITIONAL=()
while [[ ${#} -gt 0 ]]
do
  key="${1}"
  case ${key} in
    -a|--all)              ALL=YES; shift;;
    --client|--oc)         CLIENT=YES; shift;;
    -f|--force)            FORCE=YES; shift;;
    --help|-h)             usage;;
    --installdir)          INSTALLDIR=$( echo ${2} ); shift; shift;;
    --install|--installer) INSTALLER=YES; shift;;
    --version)             CVERSION=$( echo ${2} | tr -d " " ); shift; shift;;
    *)
    POSITIONAL+=("${1}")
    echo -e "Error: Unknown parameter ${1}.\n"
    usage
    ;;
  esac
done
set -- "${POSITIONAL[@]}"

# create install dir if does no exist
mkdir -p ${INSTALLDIR}
pushd ${INSTALLDIR} &>/dev/null

# create a temporary dir to work
TMPDIR=$( mktemp -d -p . )

# always download by default
[[ ! -v DOWNLOAD ]] && DOWNLOAD="YES"

# set latest as version if not provided
[[ ! -v CVERSION ]] && CVERSION="latest"

# show usage if no product (or all) is selected
if [[ "${ALL}" == "" && "${CLIENT}" == "" && "${INSTALLER}" == "" ]]; then
  echo -e "Error: No product selected.\n"
  usage
fi

# print a summary before proceeding
if [[ ${ALL} ]]; then
  echo "[main] Requested to download all products: openshift-client openshift-install."
else
  echo -n "[main] Requested to download only some products:"
  [[ ${CLIENT} ]] && echo -n " openshift-client"
  [[ ${INSTALLER} ]] && echo -n " openshift-install"
  echo "."
fi
[[ ${FORCE} ]] && echo "[main] Requested to overwrite any existing file if version matches."
echo "[main] Requested to download ${CVERSION} version of each requested component."
echo

# download components
[[ ${ALL} || ${INSTALLER} ]] && download_product openshift-install ${CVERSION} ${DOWNLOAD} &
[[ ${ALL} || ${CLIENT} ]] && download_product openshift-client ${CVERSION} ${DOWNLOAD} &
wait
